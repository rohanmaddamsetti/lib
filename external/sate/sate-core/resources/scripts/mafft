#! /usr/bin/env python

from tempfile import mkdtemp
from optparse import OptionParser
import imp
import re
import os
import sys
import shutil
import subprocess


RUN_GENERATED_FILE_BASENAMES = [
        "hat2",
        "hat3",
        "infile.tree",
        "order",
        "output_fftns1",
        "pre",
        "trace"
        ]
FILES_CREATED = []
DIRS_CREATED = []

def add_suffix(command):
    if sys.platform == 'win32':
        command += ' > NUL'
    else:
        command += ' > /dev/null'
    return command

def main_is_frozen():
    return (hasattr(sys, "frozen") or # new py2exe
        hasattr(sys, "importers") or # old py2exe
        imp.is_frozen("__main__")) # tools/freeze

def get_main_dir():
    if main_is_frozen():
        return os.path.dirname(sys.executable)
    return os.path.dirname(sys.argv[0])

def copy_file(src, dest):
    if os.path.isdir(dest):
        dest = os.path.join(dest, os.path.basename(src))
    FILES_CREATED.append(dest)
    shutil.copy(src, dest)
    return dest

def create_dir(create_in_dir):
    d = mkdtemp(prefix='mymafft', dir=create_in_dir)
    DIRS_CREATED.append(d)
    return d

def clean_up_files_and_dirs(noisy=True):
    if noisy:
        sys.stderr.write("mafft: cleaning up ...\n")
    for f in FILES_CREATED[-1::-1]:
        if noisy:
            sys.stderr.write("mafft: deleting '%s' ..." % f)
        try:
            os.remove(f)
            sys.stderr.write("OK\n")
        except OSError:
            sys.stderr.write("FAILED\n")
    for d in DIRS_CREATED[-1::-1]:
        for f in RUN_GENERATED_FILE_BASENAMES:
            try:
                os.remove(os.path.join(d, f))
            except OSError:
                pass
        if noisy:
            sys.stderr.write("mafft: deleting '%s' ..." % d)
        try:
            os.rmdir(d)
            sys.stderr.write("OK\n")
        except OSError:
            sys.stderr.write("FAILED\n")

def main():
    usage = "usage: %prog [options] args"
    parser = OptionParser(usage=usage)
    parser.add_option("--localpair", action="store_true", dest="localpair", default=False, help="linsi")
    parser.add_option("--maxiterate", dest="maxiterate", default=1000, help="maximum number of iterations")
    parser.add_option("--ep", dest="ext_penalty", default=0.123, help="maximum number of iterations")
    parser.add_option("--quiet", action="store_true", dest="quiet", default=True, help="minimum amount of output")
    parser.add_option("--trace", action="store_true", dest="trace", default=False, help="show system commands being executed")
    (options, args) = parser.parse_args()

    if len(args) == 0:
        sys.exit('Please use "python mafft -h" to get more information.\n')
    infn = os.path.abspath(args[0])
    curdir = os.getcwd()
    newdir = create_dir(create_in_dir=curdir)
    maindir = get_main_dir()

    INFILE = os.path.basename(infn)
    if sys.platform == 'win32':
        file_ext = ".exe"
    else:
        file_ext = ""

    def _trace(*args):
        if not options.trace:
            return
        sys.stderr.write("mafft: ")
        sys.stderr.write(", ".join(str(a) for a in args))
        sys.stderr.write("\n")

    def _execute(command, stdout_path=None):
        if stdout_path is not None:
            out = open(stdout_path, "w")
        elif options.quiet:
            out = open(os.devnull, "w")
        else:
            out = None
        if options.trace:
            _trace("Executing command: %s" % " ".join(command))
        p = subprocess.Popen(command, stdout=out, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate()
        if options.trace:
            _trace("Command exited with code %d" % p.returncode)
        if p.returncode:
            msg = "MAFFT program '%s' exited with error code %s:\n%s" % (command[0], p.returncode, stderr)
            sys.exit(msg)

    _compose_path = lambda fname : os.path.join(maindir, 'real_bin', fname + file_ext)
    for fname in ['pairlocalalign', 'tbfast', 'dvtditr', 'disttbfast']:
        np = _compose_path(fname)
        _trace("Copying: " + np, newdir)
        copy_file(np, newdir)
    _trace("Copying: " + infn, newdir)
    copy_file( infn, newdir )

    _trace("changing dir: " + newdir)
    os.chdir(newdir)

    # tbfast -b 62 -f -1.53 -h -0.123 -F -l 2.7 -X -i input
    # dvtditr -F -l 2.7 -z 50 -b 62 -f -1.53 -h -0.123 -I 16 -X -i pre

    if options.localpair:
        EXE_DIR = os.getcwd()
        command = [os.path.join(EXE_DIR, 'pairlocalalign'),
                "-i", INFILE,
                "-b", "62",
                "-g", "-0.100",
                "-f", "-2.00",
                "-h", "0.100",
                "-L"]
        #_command = '%s -i %s -b 62 -g -0.100 -f -2.00 -h 0.100 -L' % ( os.path.join(EXE_DIR, 'pairlocalalign'), INFILE)
        #assert " ".join(command) == _command, "\n---\n%s\n\n\n%s\n\n" % (" ".join(command), _command)
        _execute(command)

        command = [os.path.join(EXE_DIR, 'tbfast'),
                "-b", "62",
                "-f", "-1.53",
                "-h", "-" + options.ext_penalty,
                "-F",
                "-l", "2.7",
                "-X",
                "-i", INFILE]
        #_command = '%s -b 62 -f -1.53 -h -%s -F -l 2.7 -X -i %s' % (os.path.join(EXE_DIR, 'tbfast'), options.ext_penalty, INFILE)
        #assert " ".join(command) == _command, "\n---\n%s\n\n\n%s\n\n" % (" ".join(command), _command)
        _execute(command)

        command = [os.path.join(EXE_DIR, 'dvtditr'),
                "-F",
                "-l", "2.7",
                "-z", "50",
                "-b", "62",
                "-f", "-1.53",
                "-h", "-" + options.ext_penalty,
                "-I", "16",
                "-X",
                "-i", "pre"]
        #_command = '%s -F -l 2.7 -z 50 -b 62 -f -1.53 -h -%s -I 16 -X -i pre' % (os.path.join(EXE_DIR, 'dvtditr'), options.ext_penalty)
        #assert " ".join(command) == _command, "\n---\n%s\n\n\n%s\n\n" % (" ".join(command), _command)
        _execute(command)

        if not os.path.exists('pre'):
            raise Exception("Expected output file 'pre' not found")
        _trace("reading file 'pre'")
        print( open('pre').read() )

        _trace("changing directory: " + curdir)
        os.chdir(curdir)
        _trace("deleting directory: " + newdir)
        clean_up_files_and_dirs(noisy=options.trace)
    else:
        command = [os.path.join('.', 'disttbfast'),
                "-i", INFILE,
                "-b", "62",
                "-f", "-1.53",
                "-h", "-" + options.ext_penalty,
                "-F",
                "-X",
                ]
        #_command = '%s -i %s -b 62 -f -1.53 -h -%s -F -X' % ( os.path.join('.', 'disttbfast'), INFILE, options.ext_penalty)
        #assert " ".join(command) == _command, "\n---\n%s\n\n\n%s\n\n" % (" ".join(command), _command)
        _execute(command, stdout_path="output_fftns1")

        if not os.path.exists('pre'):
            raise Exception("Expected output file 'outout_fftns1' not found")
        command = [os.path.join('.', 'tbfast'),
                "-b", "62",
                "-f", "-1.53",
                "-h", "-" + options.ext_penalty,
                "-F",
                "-J",
                "-X",
                "-i", "output_fftns1"]
        #_command = '%s -b 62 -f -1.53 -h -%s -F -J -X -i output_fftns1' % ( os.path.join('.', 'tbfast'), options.ext_penalty )
        #assert " ".join(command) == _command, "\n---\n%s\n\n\n%s\n\n" % (" ".join(command), _command)
        _execute(command)

        if not os.path.exists('pre'):
            raise Exception("Expected output file 'pre' not found")
        _trace("reading file 'pre'")
        print( open('pre').read() )

        _trace("changing directory: " + curdir)
        os.chdir(curdir)
        _trace("deleting directory: " + newdir)
        clean_up_files_and_dirs(noisy=options.trace)

if __name__ == "__main__":
    main()

