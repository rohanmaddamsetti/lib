#!/usr/bin/python

## MutatorTreeAnalysis.py by Rohan Maddamsetti.

##TODO: replace RAxML functionality with SaTE to build the alignment
##and the gene tree. This will probably be slower, but I won't
##have to deal with the limitations of the PHYLIP header
##format directly (I think).

##So far this makes gene trees for all mutators with RaxML.
##The sequences for the mutators were all generated by running
##jackhmmer on the proteome database all_proteomes.txt, using
##known mutator sequences as queries.

##Later, I will use Lawrence David's AnGST software to
##estimate gene losses, duplications, and HGT events from the gene
##tree and the species tree.

##I should generate gene trees for all relevant mutators,
##and I should use the AnGST results to estimate the
##average time between gene loss, duplication, and HGT events.
##I can compare this time to the time that it would take for
##mutation to change the GC content at neutral sites significantly.
##If DNA repair systems change on a more rapid time scale than
##genomic content, then this is a good explanation for my negative
##results.
##Otherwise, I have to invoke more speculative ideas (environment?
##redundancy?)

import sys
sys.path.append("/Users/Nathan/Desktop/ltee_comparative_genomics")
sys.path.append("/Users/Nathan/Desktop/Mutator_MSA")
import relgenomics
import HMMERanalysis
import dendropy
from operator import itemgetter
import subprocess
import cPickle
from os.path import isfile
from os import listdir

def buildMutatorTrees():
    
    ##The following is cribbed directly from HMMERanalysis.py.
    ##I ought to refactor this code into a bunch of functions, in case
    ##it becomes useful in the future.
    
    #load the proteome database into memory.
    prot_hash = cPickle.load(open("pickled_proteomes.p", "r"))

    ##iterate over the list of jackhmmer results for the mutators.
    results_dir = "/Users/Nathan/Desktop/queries/results/"
    jackhmmer_result_files = listdir(results_dir)
    for result_file in jackhmmer_result_files:
        mutator_name, sep, rest = result_file.partition("results")
        results = HMMERanalysis.sort_hmmer_scores(results_dir + result_file)
        ##arbitrarily set score threshold to 100.
        ##TODO: replace this with an E-value based threshold.
        threshold = HMMERanalysis.find_score_threshold(results, 100)
        ##truncate the results.
        threshold_index = [k for k,v in results].index(threshold)
        tophits = results[:threshold_index]
        ##Write the top hits to a temporary FASTA file.
        hitfile_name = mutator_name + '_hits.fasta'
        hitfile = open(hitfile_name, "w")
        for hitname, hitscore in tophits:
            hitfile.write(">" + hitname + "\n")
            hitfile.write(prot_hash[hitname] + "\n\n")
        hitfile.close()
##align the gene sequences and build the gene tree with SaTE.
##The README cautions that the initial alignment can be
##extremely slow.
        relgenomics.align_using_sate(hitfile_name)
        ##break, for testing purposes.
        ##TODO: before taking out this break statement,
        ##implement an E-value based threshold.
        break

def main():
    buildMutatorTrees()
##TODO: write code here to analyze the newly created tree with AnGST.
    
#        ##align the hits with mafft.
#        msa_output = mutator_name + '_mafft.fasta'
#        mafft_proc = subprocess.call([
#            'mafft ' + hitfile_name + ' > ' + msa_output],
#                                     shell=True,
#                                     stdout=HMMERanalysis.IGNORE,
#                                     stderr=HMMERanalysis.IGNORE)
#
#        ##raxml needs the alignment to be in relaxed PHYML format.
#        phylipfile = mutator_name + '_aln.phy'
#        try:
#            relgenomics.convert_fasta_to_phylip(msa_output, phylipfile)
#        except ValueError:
#            print mutator_name + " is being skipped. Repeated identifiers were found in the truncated name in the phylip-formatted alignment."
#            continue
#        ## run raxml to make a tree of the preceding sequences.
#        tree_suffix = mutator_name + '.txt'
#        tree_cmd = 'raxml -s ' + phylipfile + ' -m PROTCATJTT -T 7 -n ' + \
#                   tree_suffix
#        tree_proc = subprocess.Popen(tree_cmd, shell=True) #,
#                                     #stdout=HMMERanalysis.IGNORE,
#                                     #stderr=HMMERanalysis.IGNORE)
#        tree_proc.wait()
    
if __name__ == "__main__":
    main()
